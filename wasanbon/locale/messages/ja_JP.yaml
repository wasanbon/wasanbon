none : '適切なドキュメントが見つかりませんでした'
help :
  command : 
    brief :
      init : 'wasanbonの初期化．最初に呼ばれるべきコマンド'
      project : 'プロジェクトの開始'
      rtm : 'RTミドルウエアの管理'
      selfupdate : '自己アップデート．sudoして呼んでください'
      tools :  'eclipseやrtshellなどのツールの管理と実行'
      help : 'このヘルプの表示'
      edit : 'エディタの実行．RTC固有のファイルを開く'
      build : 'RTCのビルド'
      ssh_init : 'SSH-Keyを作成し，githubに追加する'
      system : 'システムの実行や管理'
      rtc: 'プロジェクト内のRTCの管理'
      admin: 'プロジェクトの管理'
      make: 'RTCをビルドします．adminコマンド版で，プロジェクトを自動検索します'
      nameserver: 'RTシステムが参照するネームサービスのアドレスを指定します．'
    description :
      init : 
        - 'wasanbonの初期化をします．'
        - 'sudoして呼んでください．WindowsではUACをOFFしてください．'
        - 'まずHOMEディレクトリにrtmディレクトリを作り，必要なモジュールをダウンロード・インストールします'
        - '開発に必要なgitやcmake，doxygenなどのツールもインストールします．'
        - 'RTミドルウエアがインストールされていない場合は，インストールを開始します．'
        - 'また，eclipseやrtshellなどのツールもインストールします．'
      project :
        - '以下のサブコマンドが必要です．'
        - 'create  :'
        - '         $ wasanbon-admin.py project create [your app name]'
        - '         プロジェクトを開始します．引数にproject名を取ります．'
        - '         カレントディレクトリにプロジェクト名のディレクトリを作成して，その中に'
        - '         プロジェクトに必要なファイルをコピーします．'
        - 'list    :'
        - '         $ wasanbon-admin.py project list'
        - '         登録中のプロジェクトをリスト表示します．'
        - 'unregister :'
        - '         $ wasanbon-admin.py project unregister [your app name]'
        - '         プロジェクトをワークスペース管理下から削除します．'
        - '         フォルダ自体は残るので，フォルダ内のmgr.pyから，'
        - '          $ mgr.py admin register'
        - '         で，再登録を行うことができます．'
      rtm :
        - 'プラットフォーム上のRTミドルウエアの管理をします．'
        - '以下のサブコマンドが必要です．'
        - 'status :'
        - '         RTミドルウエアのインストール状況を表示します．'
        - 'install :'
        - '         RTミドルウエアのインストールを試みます．'
        - '         --forceを加えることで，上書きインストールを試みます'
      selfupdate :
        - 'wasanbon本体をアップデートします．'
        - 'sudoして実行してください．WindowsではUACをOFFにしてください．'
        - 'selfupdateはinitコマンドが成功している場合に利用可能です．'
        - '$HOME/rtm/temp以下にgitを使って最新のwasanbonコードをダウンロードしてアップデートします．'
      rtc :
        - 'プロジェクト内のRTコンポーネントを管理します．'
        - '以下のサブコマンドが必要です．'
        - 'list :'
        - '         現在のプロジェクト配下のRTCをリストアップします．'
        - '         例： $ ./mgr.py rtc list'
        - 'clone :'
        - '         gitを使ってリポジトリからRTCのコードをダウンロードします．'
        - '         例: $ mgr.py rtc clone ConsoleOutput'
        - 'repository :'
        - '         現在リポジトリファイルに登録されているRTCをすべて表示します．'
        - '         例： $ ./mgr.py rtc repository'
        - 'git_init : '
        - '         gitによるバージョン管理を開始します．引数にRTC名を取ります．'
        - '         例： $ ./mgr.py rtc git_init ConsoleOutput'
        - 'commit : '
        - '         gitリポジトリにコミットします．引数にRTC名とコメントを取ります．'
        - '         例： $ ./mgr.py rtc commit ConsoleOutput "update some files."'
        - 'push :'
        - '         アップストリームのgitサーバーにpushします．引数にRTC名を取ります．'
        - '         例： $ ./mgr.py rtc push ConsoleOutput'
        - 'github_init :'
        - '         github.com に同名のリポジトリを作成してリンクします．'
        - '         先にgit_initをしておく必要があります．'
        - '         引数にRTC名を取ります．'
        - '         例： $ ./mgr.py rtc github_init ConsoleOutput'
      edit :
        - 'RTコンポーネントのソースコードを編集します．引数にRTC名を取ります．'
        - 'エディタとしてemacsを使います．emacsに不慣れな人は使わないで下さい'
        - '例： $ ./mgr.py edit ConsoleOut'
      system :
        - 'RTSystemの管理を行います．以下のサブコマンドを使用出来ます．'
        - 'install: '
        - '         RTCをsystemに加えます．RTC.xmlを読み込み，言語プロパティから'
        - '         自動的にconf/以下のコンフィグファイルを変更して，'
        - '         run 時に自動的にRTCが起動するように変更します．'
        - '         例 : ./mgr.py system install ConsoleOutput'
        - 'run : '
        - '         RT Systemを起動します．'
        - '         システムはRTC Daemonから起動されますが，C++, Python, Javaの'
        - '         ３つのバージョンのRTC Daemonを同時に起動します．'
        - '         さらに，setting.yamlで設定されるRTSプロファイルを読み込み，'
        - '         RT Systemの構築とアクティブ化を行います．'
        - '         --nobuildオプションを設定することで，RTSプロファイルを使用した'
        - '         システム構築を抑制出来ます．'
        - 'build : '
        - '         RT System Profileを作成するために，コネクションと'
        - '         コンフィグレーションを生成します．'
        - '         デフォルトでは，コンソールに可能なコネクションをすべて列挙します'
        - '         yesかnoで答えることで，すべてのコネクションをインタラクティブに'
        - '         生成することが出来ます．'
        - '         次に，各RTCのコンフィグレーションを列挙します．'
        - '         対象とするコンフィグレーションを選択して変更します．'
        - 'nameserver : '
        - '         ネームサーバーを設定します．'
        - '         ここで設定するネームサーバーは起動したすべてのRTCが登録される'
        - '         ネームサーバーを指します．'
        - '         他のRTCが登録されている外部のネームサービスを登録する場合は'
        - '         $ mgr.py nameserver'
        - '         を実行します．'
      tools :
        - 'RTコンポーネント開発ツールを起動します．'
        - '以下のサブコマンドが有効です．' 
        - '           rtcb : RTC Builderを起動します．'
        - '           rtse : RT System Editorを起動します．'
      build :
        - 'RTCをBuildします．Java版，C++版に対応しています．'
        - '引数にRTCの名前をとります．'
      admin :
        - 'プロジェクトの管理を行います．以下のサブコマンドが有効です'
        - 'register :'
        - '         プロジェクトをワークスペースとして管理下に登録できます．'
        - '         $HOME/rtm/workspace.yamlにプロジェクトの情報がおかれます．'
        - '         作成されたプロジェクトはデフォルトで管理下に置かれますが，'
        - '         フォルダコピーなど管理外に置かれた場合は，これで復帰します'
      make :
        - 'RTCをビルドします．$HOME/rtm/workspace.yamlに登録されているプロジェクト内のRTCをビルドできます．'
        - '使い方は2種類あります．'
        - '$ wasanbon-admin.py make [project name] [rtc name]'
        - '         指定したプロジェクト内の指定したRTCをビルドします．'
        - '         rtc_nameにallを指定することもできます．'
        - '$ wasanbon-admin.py make (RTCのディレクトリ内)'
        - '         登録プロジェクト内のRTCのディレクトリ内では，'
        - '         よりシンプルなコマンドでmakeができます．'
      nameserver : 
        - 'ネームサーバーを登録します．'